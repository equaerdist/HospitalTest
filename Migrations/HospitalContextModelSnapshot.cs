// <auto-generated />
using System;
using HospitalTest.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalTest.Migrations
{
    [DbContext(typeof(HospitalContext))]
    partial class HospitalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HospitalTest.Infrastructure.Area", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AreaNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("area_number");

                    b.HasKey("Id")
                        .HasName("pk_area");

                    b.ToTable("area", (string)null);
                });

            modelBuilder.Entity("HospitalTest.Infrastructure.Cabinet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CabinetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cabinet_number");

                    b.HasKey("Id")
                        .HasName("pk_cabinet");

                    b.ToTable("cabinet", (string)null);
                });

            modelBuilder.Entity("HospitalTest.Infrastructure.Doctor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AreaId")
                        .HasColumnType("bigint")
                        .HasColumnName("area_id");

                    b.Property<long>("CabinetId")
                        .HasColumnType("bigint")
                        .HasColumnName("cabinet_id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("full_name");

                    b.Property<long>("SpecializationId")
                        .HasColumnType("bigint")
                        .HasColumnName("specialization_id");

                    b.HasKey("Id")
                        .HasName("pk_doctors");

                    b.HasIndex("AreaId")
                        .HasDatabaseName("ix_doctors_area_id");

                    b.HasIndex("CabinetId")
                        .IsUnique()
                        .HasDatabaseName("ix_doctors_cabinet_id");

                    b.HasIndex("SpecializationId")
                        .HasDatabaseName("ix_doctors_specialization_id");

                    b.ToTable("doctors", (string)null);
                });

            modelBuilder.Entity("HospitalTest.Infrastructure.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<long>("AreaId")
                        .HasColumnType("bigint")
                        .HasColumnName("area_id");

                    b.Property<DateTime>("BirthDateInUtc")
                        .HasColumnType("datetime2")
                        .HasColumnName("birth_date_in_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("patronymic");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sex");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("pk_patients");

                    b.HasIndex("AreaId")
                        .HasDatabaseName("ix_patients_area_id");

                    b.ToTable("patients", (string)null);
                });

            modelBuilder.Entity("HospitalTest.Infrastructure.Specialization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_specialization");

                    b.ToTable("specialization", (string)null);
                });

            modelBuilder.Entity("HospitalTest.Infrastructure.Doctor", b =>
                {
                    b.HasOne("HospitalTest.Infrastructure.Area", "Area")
                        .WithMany("Doctors")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("fk_doctors_area_area_id");

                    b.HasOne("HospitalTest.Infrastructure.Cabinet", "Cabinet")
                        .WithOne("Doctor")
                        .HasForeignKey("HospitalTest.Infrastructure.Doctor", "CabinetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doctors_cabinet_cabinet_id");

                    b.HasOne("HospitalTest.Infrastructure.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doctors_specialization_specialization_id");

                    b.Navigation("Area");

                    b.Navigation("Cabinet");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("HospitalTest.Infrastructure.Patient", b =>
                {
                    b.HasOne("HospitalTest.Infrastructure.Area", "Area")
                        .WithMany("Patients")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_patients_area_area_id");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("HospitalTest.Infrastructure.Area", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalTest.Infrastructure.Cabinet", b =>
                {
                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalTest.Infrastructure.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
